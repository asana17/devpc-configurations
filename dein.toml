[[plugins]]
repo = "lambdalisue/fern.vim"
hook_add = '''
  let g:fern#default_hidden=1
'''

[[plugins]]
repo = "lambdalisue/fern-hijack.vim"

[[plugins]]
repo = 'LumaKernel/fern-mapping-fzf.vim'
depends = ['fzf', 'fern.vim']
hook_add = '''
  nmap <C-t> <Plug>(fern-action-fzf-files)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
  let g:airline_theme = 'luna'
'''

[[plugins]]
repo = "marko-cerovac/material.nvim"

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
lua_add = '''
  vim.opt.list = true
  vim.opt.listchars:append "space:⋅"

  require("indent_blankline").setup {
      show_end_of_line = true,
      space_char_blankline = " ",
  }
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'bkad/CamelCaseMotion'
hook_add = '''
  let g:camelcasemotion_key = '<leader>'
'''
[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
  map *  <Plug>(asterisk-z*)
  map #  <Plug>(asterisk-z#)
  map g* <Plug>(asterisk-gz*)
  map g# <Plug>(asterisk-gz#)
'''
[[plugins]]
repo = 'folke/which-key.nvim'
lua_add = '''
  vim.o.timeout = true
  vim.o.timeoutlen = 300
  require("which-key").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0
# "\g" to run ripgrep
hook_add = '''
  function! s:find_rip_grep() abort
      call fzf#vim#grep(
                  \   'rg --ignore-file ~/.ignore --column --line-number --no-heading --hidden --smart-case .+',
                  \   1,
                  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
                  \   0,
                  \ )
  endfunction
  nnoremap <silent> <Leader>g :<C-u>silent call <SID>find_rip_grep()<CR>
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'preservim/vim-markdown'
hook_add = '''
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
    autocmd BufRead,BufNewFile *.md  set filetype=markdown
    nnoremap <silent> <C-p> :PrevimOpen<CR>
    let g:vim_markdown_folding_disabled=1
    let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
[[plugins]]
repo = 'tyru/open-browser-github.vim'

[[plugins]]
repo = 't9md/vim-quickhl'
[[plugins]]
repo = 'petertriho/nvim-scrollbar'
lua_add = '''
  require("scrollbar").setup()
'''
[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
lua_add = '''
  require('hlslens').setup()

  local kopts = {noremap = true, silent = true}

  vim.api.nvim_set_keymap('n', 'n',
      [[<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>]],
      kopts)
  vim.api.nvim_set_keymap('n', 'N',
      [[<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>]],
      kopts)
  vim.api.nvim_set_keymap('n', '*', [[*<Cmd>lua require('hlslens').start()<CR>]], kopts)
  vim.api.nvim_set_keymap('n', '#', [[#<Cmd>lua require('hlslens').start()<CR>]], kopts)
  vim.api.nvim_set_keymap('n', 'g*', [[g*<Cmd>lua require('hlslens').start()<CR>]], kopts)
  vim.api.nvim_set_keymap('n', 'g#', [[g#<Cmd>lua require('hlslens').start()<CR>]], kopts)

  vim.api.nvim_set_keymap('n', '<Leader>l', '<Cmd>noh<CR>', kopts)
'''

[[plugins]]
repo = 'unblevable/quick-scope'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddx.vim'

[[plugins]]
repo = 'windwp/nvim-autopairs'
lua_add = '''
  require("nvim-autopairs").setup {}
'''

[[plugins]]
repo = 'michaelb/sniprun'
build = './install.sh'

[[plugins]]
repo = 'rhysd/committia.vim'

[[plugins]]
repo = 'mtdl9/vim-log-highlighting'

#--------------------------------------

[[plugins]]
repo = "prabirshrestha/async.vim"

[[plugins]]
repo = "prabirshrestha/asyncomplete.vim"
hook_add = '''
  inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  inoremap <expr><cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-buffer.vim'
hook_add = '''
  call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
      \ 'name': 'buffer',
      \ 'priority': 5,
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#buffer#completor')
      \ }))
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-file.vim'
hook_source = '''
  call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'priority': 3,
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#file#completor')
      \ }))
'''

#----------snippets-------------

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  let g:neosnippet#snippets_directory = '~/.local/share/dein/repos/github.com/honza/vim-snippets/snippets'
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim']
hook_source = '''
  call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'priority': 9,
    \ 'completor': function('asyncomplete#sources#neosnippet#completor')
    \}))
'''

#----------vim lsp------------
[[plugins]]
repo = "prabirshrestha/asyncomplete-lsp.vim"

[[plugins]]
repo = "prabirshrestha/vim-lsp"
hook_add = '''
  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_virtual_text_prefix = " ‣ "
  let g:lsp_diagnostics_virtual_text_align = "right"
  let g:lsp_peek_alignment = "right"
  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <C-h> <plug>(lsp-hover)
'''

[[plugins]]
repo = "mattn/vim-lsp-settings"

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = '''
  :TSupdate
'''

[[plugins]]
repo = "haringsrob/nvim_context_vt"

[[plugins]]
repo = 'yioneko/nvim-yati'
on_ft='*'
[[plugins]]
repo = 'm-demare/hlargs.nvim'
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'

[[plugins]]
repo = "rhysd/vim-grammarous"
hook_add = '''
  let g:grammarous#enable_spell_check=1
  let g:grammarous#default_comments_only_filetypes = {
            \ '*' : 1, 'help' : 0, 'markdown' : 0,
            \ }
  let g:grammarous#jar_url = 'https://www.languagetool.org/download/LanguageTool-5.9.zip'

  let g:grammarous#hooks = {}
  function! g:grammarous#hooks.on_check(errs) abort
      nmap <buffer> n <Plug>(grammarous-move-to-next-error)
      nmap <buffer> p <Plug>(grammarous-move-to-previous-error)
      nmap <buffer> f <Plug>(grammarous-fixit)
      nmap <buffer> r <Plug>(grammarous-remove-error)
  endfunction

  function! g:grammarous#hooks.on_reset(errs) abort
      nunmap <buffer> n
      nunmap <buffer> p
      nunmap <buffer> f
      nunmap <buffer> r
  endfunction
'''
# to fix bug temporaliy, need to delete vim-grammarous/autoload/grammarous.vim L698: "call grammarous#info_win#close()



[[plugins]]
repo = "vim-scripts/a.vim"

[[plugins]]
repo = "preservim/tagbar"
hook_add = '''
  nmap <F8> : TagbarToggle<CR>
  let g:tagbar_type_css = {
  \ 'ctagstype' : 'Css',
    \ 'kinds'     : [
        \ 'c:classes',
        \ 's:selectors',
        \ 'i:identities'
    \ ]
  \ }
  let g:tagbar_type_markdown = {
    \ 'ctagstype'	: 'markdown',
    \ 'kinds'		: [
      \ 'c:chapter:0:1',
      \ 's:section:0:1',
      \ 'S:subsection:0:1',
      \ 't:subsubsection:0:1',
      \ 'T:l4subsection:0:1',
      \ 'u:l5subsection:0:1',
    \ ],
    \ 'sro'			: '""',
    \ 'kind2scope'	: {
      \ 'c' : 'chapter',
      \ 's' : 'section',
      \ 'S' : 'subsection',
      \ 't' : 'subsubsection',
      \ 'T' : 'l4subsection',
    \ },
    \ 'scope2kind'	: {
      \ 'chapter' : 'c',
      \ 'section' : 's',
      \ 'subsection' : 'S',
      \ 'subsubsection' : 't',
      \ 'l4subsection' : 'T',
    \ },
  \ }
  let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits',
        \'i:impls,trait implementations',
    \]
  \}
  let g:tagbar_type_yaml = {
    \ 'ctagstype' : 'yaml',
    \ 'kinds' : [
        \ 'a:anchors',
        \ 's:section',
        \ 'e:entry'
    \ ],
  \ 'sro' : '.',
    \ 'scope2kind': {
      \ 'section': 's',
      \ 'entry': 'e'
    \ },
    \ 'kind2scope': {
      \ 's': 'section',
      \ 'e': 'entry'
    \ },
    \ 'sort' : 0
    \ }
'''

[[plugins]]
repo = "rust-lang/rust.vim"
hook_add = '''
 let g:rustfmt_autosave = 1
'''

#--------------vim latex-------------------
[[plugins]]
repo = 'vim-latex/vim-latex'
on_ft = 'tex'
hook_add = '''
  filetype plugin on
  filetype indent on
  set shellslash
  set grepprg=grep\ -nH\ $*
  let g:tex_flavor='latex'
  let g:Imap_UsePlaceHolders = 1
  let g:Imap_DeleteEmptyPlaceHolders = 1
  let g:Imap_StickyPlaceHolders = 0
  let g:Tex_DefaultTargetFormat = 'pdf'
  let g:Tex_MultipleCompileFormats='dvi,pdf'
  "let g:Tex_FormatDependency_pdf = 'pdf'
  let g:Tex_FormatDependency_pdf = 'dvi,pdf'
  let g:Tex_CompileRule_pdf = 'ptex2pdf -u -l -ot "-synctex=1 -interaction=nonstopmode -file-line-error-style" $*'
  "let g:Tex_CompileRule_pdf = 'lualatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
  let g:Tex_CompileRule_dvi = 'uplatex -synctex=1 -interaction=nonstopmode -file-line-error-style $*'
  let g:Tex_BibtexFlavor = 'upbibtex'
  let g:Tex_MakeIndexFlavor = 'upmendex $*.idx'
  let g:Tex_UseEditorSettingInDVIViewer = 1
  let g:Tex_ViewRule_pdf = 'xdg-open'
  "let g:Tex_ViewRule_pdf = 'evince'
  "let g:Tex_ViewRule_pdf = 'okular --unique'
  "let g:Tex_ViewRule_pdf = 'zathura -x "vim --servername synctex -n --remote-silent +\%{line} \%{input}"'
  "let g:Tex_ViewRule_pdf = 'qpdfview --unique'
  "let g:Tex_ViewRule_pdf = 'texworks'
  "let g:Tex_ViewRule_pdf = 'mupdf'
  "let g:Tex_ViewRule_pdf = 'firefox -new-window'
  "let g:Tex_ViewRule_pdf = 'chromium --new-window'
'''


